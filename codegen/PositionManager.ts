/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export type LiquidationConditionStruct = {
  watchedToken: PromiseOrValue<string>;
  liquidateTo: PromiseOrValue<string>;
  lessThan: PromiseOrValue<boolean>;
  liquidationPoint: PromiseOrValue<BigNumberish>;
  slippage: PromiseOrValue<BigNumberish>;
};

export type LiquidationConditionStructOutput = [string, string, boolean, BigNumber, BigNumber] & {
  watchedToken: string;
  liquidateTo: string;
  lessThan: boolean;
  liquidationPoint: BigNumber;
  slippage: BigNumber;
};

export type SwapPointStruct = {
  amountIn: PromiseOrValue<BigNumberish>;
  valueIn: PromiseOrValue<BigNumberish>;
  amountOut: PromiseOrValue<BigNumberish>;
  valueOut: PromiseOrValue<BigNumberish>;
  slippage: PromiseOrValue<BigNumberish>;
  tokenIn: PromiseOrValue<string>;
  swappers: PromiseOrValue<string>[];
  tokenOut: PromiseOrValue<string>;
  paths: PromiseOrValue<string>[][];
};

export type SwapPointStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string[],
  string,
  string[][]
] & {
  amountIn: BigNumber;
  valueIn: BigNumber;
  amountOut: BigNumber;
  valueOut: BigNumber;
  slippage: BigNumber;
  tokenIn: string;
  swappers: string[];
  tokenOut: string;
  paths: string[][];
};

export type AssetStruct = {
  pool: PromiseOrValue<string>;
  manager: PromiseOrValue<string>;
  tokenId: PromiseOrValue<BigNumberish>;
  liquidity: PromiseOrValue<BigNumberish>;
  data: PromiseOrValue<BytesLike>;
};

export type AssetStructOutput = [string, string, BigNumber, BigNumber, string] & {
  pool: string;
  manager: string;
  tokenId: BigNumber;
  liquidity: BigNumber;
  data: string;
};

export type ConversionStruct = {
  desiredERC721: AssetStruct;
  desiredERC20: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  underlying: PromiseOrValue<string>[];
  underlyingValues: PromiseOrValue<BigNumberish>[];
};

export type ConversionStructOutput = [AssetStructOutput, string, BigNumber, string[], BigNumber[]] & {
  desiredERC721: AssetStructOutput;
  desiredERC20: string;
  value: BigNumber;
  underlying: string[];
  underlyingValues: BigNumber[];
};

export type PositionStruct = {
  user: PromiseOrValue<string>;
  bank: PromiseOrValue<string>;
  bankToken: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
  liquidationPoints: LiquidationConditionStruct[];
};

export type PositionStructOutput = [string, string, BigNumber, BigNumber, LiquidationConditionStructOutput[]] & {
  user: string;
  bank: string;
  bankToken: BigNumber;
  amount: BigNumber;
  liquidationPoints: LiquidationConditionStructOutput[];
};

export type ProvidedStruct = {
  tokens: PromiseOrValue<string>[];
  amounts: PromiseOrValue<BigNumberish>[];
  nfts: AssetStruct[];
};

export type ProvidedStructOutput = [string[], BigNumber[], AssetStructOutput[]] & {
  tokens: string[];
  amounts: BigNumber[];
  nfts: AssetStructOutput[];
};

export type BankTokenInfoStruct = {
  lpToken: PromiseOrValue<string>;
  manager: PromiseOrValue<string>;
  idInManager: PromiseOrValue<BigNumberish>;
};

export type BankTokenInfoStructOutput = [string, string, BigNumber] & {
  lpToken: string;
  manager: string;
  idInManager: BigNumber;
};

export type PositionDataStruct = {
  position: PositionStruct;
  bankTokenInfo: BankTokenInfoStruct;
  underlyingTokens: PromiseOrValue<string>[];
  underlyingAmounts: PromiseOrValue<BigNumberish>[];
  underlyingValues: PromiseOrValue<BigNumberish>[];
  rewardTokens: PromiseOrValue<string>[];
  rewardAmounts: PromiseOrValue<BigNumberish>[];
  rewardValues: PromiseOrValue<BigNumberish>[];
  usdValue: PromiseOrValue<BigNumberish>;
};

export type PositionDataStructOutput = [
  PositionStructOutput,
  BankTokenInfoStructOutput,
  string[],
  BigNumber[],
  BigNumber[],
  string[],
  BigNumber[],
  BigNumber[],
  BigNumber
] & {
  position: PositionStructOutput;
  bankTokenInfo: BankTokenInfoStructOutput;
  underlyingTokens: string[];
  underlyingAmounts: BigNumber[];
  underlyingValues: BigNumber[];
  rewardTokens: string[];
  rewardAmounts: BigNumber[];
  rewardValues: BigNumber[];
  usdValue: BigNumber;
};

export type PositionInteractionStruct = {
  action: PromiseOrValue<string>;
  timestamp: PromiseOrValue<BigNumberish>;
  blockNumber: PromiseOrValue<BigNumberish>;
  assets: ProvidedStruct;
  usdValue: PromiseOrValue<BigNumberish>;
  positionSizeChange: PromiseOrValue<BigNumberish>;
};

export type PositionInteractionStructOutput = [
  string,
  BigNumber,
  BigNumber,
  ProvidedStructOutput,
  BigNumber,
  BigNumber
] & {
  action: string;
  timestamp: BigNumber;
  blockNumber: BigNumber;
  assets: ProvidedStructOutput;
  usdValue: BigNumber;
  positionSizeChange: BigNumber;
};

export interface PositionManagerInterface extends utils.Interface {
  functions: {
    "addBank(address)": FunctionFragment;
    "adjustLiquidationPoints(uint256,(address,address,bool,uint256,uint256)[])": FunctionFragment;
    "banks(uint256)": FunctionFragment;
    "botLiquidate(uint256,uint256,(uint256,uint256,uint256,uint256,int256,address,address[],address,address[][])[],((address,address,uint256,uint256,bytes),address,uint256,address[],uint256[])[])": FunctionFragment;
    "checkLiquidate(uint256)": FunctionFragment;
    "close(uint256)": FunctionFragment;
    "deposit((address,address,uint256,uint256,(address,address,bool,uint256,uint256)[]),address[],uint256[])": FunctionFragment;
    "depositInExisting(uint256,(address[],uint256[],(address,address,uint256,uint256,bytes)[]),(uint256,uint256,uint256,uint256,int256,address,address[],address,address[][])[],((address,address,uint256,uint256,bytes),address,uint256,address[],uint256[])[],uint256[])": FunctionFragment;
    "estimateValue(uint256,address)": FunctionFragment;
    "getBanks()": FunctionFragment;
    "getPosition(uint256)": FunctionFragment;
    "getPositionInteractions(uint256)": FunctionFragment;
    "getPositionRewards(uint256)": FunctionFragment;
    "getPositionTokens(uint256)": FunctionFragment;
    "getPositions(address)": FunctionFragment;
    "harvestAndRecompound(uint256,(uint256,uint256,uint256,uint256,int256,address,address[],address,address[][])[],((address,address,uint256,uint256,bytes),address,uint256,address[],uint256[])[],uint256[])": FunctionFragment;
    "harvestRewards(uint256)": FunctionFragment;
    "helper()": FunctionFragment;
    "keepers(address)": FunctionFragment;
    "networkToken()": FunctionFragment;
    "numPositions()": FunctionFragment;
    "owner()": FunctionFragment;
    "positionClosed(uint256)": FunctionFragment;
    "positionInteractions(uint256,uint256)": FunctionFragment;
    "positions(uint256)": FunctionFragment;
    "recommendBank(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setKeeper(address,bool)": FunctionFragment;
    "setUniversalSwap(address)": FunctionFragment;
    "stableToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "universalSwap()": FunctionFragment;
    "userPositions(address,uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addBank"
      | "adjustLiquidationPoints"
      | "banks"
      | "botLiquidate"
      | "checkLiquidate"
      | "close"
      | "deposit"
      | "depositInExisting"
      | "estimateValue"
      | "getBanks"
      | "getPosition"
      | "getPositionInteractions"
      | "getPositionRewards"
      | "getPositionTokens"
      | "getPositions"
      | "harvestAndRecompound"
      | "harvestRewards"
      | "helper"
      | "keepers"
      | "networkToken"
      | "numPositions"
      | "owner"
      | "positionClosed"
      | "positionInteractions"
      | "positions"
      | "recommendBank"
      | "renounceOwnership"
      | "setKeeper"
      | "setUniversalSwap"
      | "stableToken"
      | "transferOwnership"
      | "universalSwap"
      | "userPositions"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addBank", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "adjustLiquidationPoints",
    values: [PromiseOrValue<BigNumberish>, LiquidationConditionStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "banks", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "botLiquidate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, SwapPointStruct[], ConversionStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "checkLiquidate", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "close", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PositionStruct, PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositInExisting",
    values: [
      PromiseOrValue<BigNumberish>,
      ProvidedStruct,
      SwapPointStruct[],
      ConversionStruct[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateValue",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getBanks", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPosition", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getPositionInteractions", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getPositionRewards", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getPositionTokens", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getPositions", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "harvestAndRecompound",
    values: [PromiseOrValue<BigNumberish>, SwapPointStruct[], ConversionStruct[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "harvestRewards", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "helper", values?: undefined): string;
  encodeFunctionData(functionFragment: "keepers", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "networkToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "numPositions", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "positionClosed", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "positionInteractions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "positions", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "recommendBank", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "setKeeper", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: "setUniversalSwap", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "stableToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "universalSwap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userPositions",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addBank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adjustLiquidationPoints", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "banks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "botLiquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkLiquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositInExisting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "estimateValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBanks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPosition", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPositionInteractions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPositionRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPositionTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPositions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvestAndRecompound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvestRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "helper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keepers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "networkToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numPositions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positionClosed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positionInteractions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recommendBank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUniversalSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stableToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "universalSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userPositions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(uint256,address,uint256,address,uint256,tuple[])": EventFragment;
    "Harvest(uint256,address[],uint256[])": EventFragment;
    "HarvestRecompound(uint256,uint256)": EventFragment;
    "IncreasePosition(uint256,uint256)": EventFragment;
    "KeeperUpdate(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PositionClose(uint256)": EventFragment;
    "Withdraw(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestRecompound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionClose"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositEventObject {
  positionId: BigNumber;
  bank: string;
  bankToken: BigNumber;
  user: string;
  amount: BigNumber;
  liquidationPoints: LiquidationConditionStructOutput[];
}
export type DepositEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, LiquidationConditionStructOutput[]],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface HarvestEventObject {
  positionId: BigNumber;
  rewards: string[];
  rewardAmounts: BigNumber[];
}
export type HarvestEvent = TypedEvent<[BigNumber, string[], BigNumber[]], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface HarvestRecompoundEventObject {
  positionId: BigNumber;
  lpTokens: BigNumber;
}
export type HarvestRecompoundEvent = TypedEvent<[BigNumber, BigNumber], HarvestRecompoundEventObject>;

export type HarvestRecompoundEventFilter = TypedEventFilter<HarvestRecompoundEvent>;

export interface IncreasePositionEventObject {
  positionId: BigNumber;
  amount: BigNumber;
}
export type IncreasePositionEvent = TypedEvent<[BigNumber, BigNumber], IncreasePositionEventObject>;

export type IncreasePositionEventFilter = TypedEventFilter<IncreasePositionEvent>;

export interface KeeperUpdateEventObject {
  keeper: string;
  active: boolean;
}
export type KeeperUpdateEvent = TypedEvent<[string, boolean], KeeperUpdateEventObject>;

export type KeeperUpdateEventFilter = TypedEventFilter<KeeperUpdateEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PositionCloseEventObject {
  positionId: BigNumber;
}
export type PositionCloseEvent = TypedEvent<[BigNumber], PositionCloseEventObject>;

export type PositionCloseEventFilter = TypedEventFilter<PositionCloseEvent>;

export interface WithdrawEventObject {
  positionId: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface PositionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PositionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBank(
      bank: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    adjustLiquidationPoints(
      positionId: PromiseOrValue<BigNumberish>,
      _liquidationPoints: LiquidationConditionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    banks(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    botLiquidate(
      positionId: PromiseOrValue<BigNumberish>,
      liquidationIndex: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkLiquidate(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { index: BigNumber; liquidate: boolean }>;

    close(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      position: PositionStruct,
      suppliedTokens: PromiseOrValue<string>[],
      suppliedAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositInExisting(
      positionId: PromiseOrValue<BigNumberish>,
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateValue(
      positionId: PromiseOrValue<BigNumberish>,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBanks(overrides?: CallOverrides): Promise<[string[]]>;

    getPosition(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PositionDataStructOutput] & { data: PositionDataStructOutput }>;

    getPositionInteractions(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PositionInteractionStructOutput[]]>;

    getPositionRewards(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[]] & {
        rewards: string[];
        rewardAmounts: BigNumber[];
        rewardValues: BigNumber[];
      }
    >;

    getPositionTokens(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[]] & {
        tokens: string[];
        amounts: BigNumber[];
        values: BigNumber[];
      }
    >;

    getPositions(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    harvestAndRecompound(
      positionId: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    harvestRewards(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    helper(overrides?: CallOverrides): Promise<[string]>;

    keepers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    networkToken(overrides?: CallOverrides): Promise<[string]>;

    numPositions(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    positionClosed(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    positionInteractions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, ProvidedStructOutput, BigNumber, BigNumber] & {
        action: string;
        timestamp: BigNumber;
        blockNumber: BigNumber;
        assets: ProvidedStructOutput;
        usdValue: BigNumber;
        positionSizeChange: BigNumber;
      }
    >;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        user: string;
        bank: string;
        bankToken: BigNumber;
        amount: BigNumber;
      }
    >;

    recommendBank(lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setKeeper(
      keeperAddress: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUniversalSwap(
      _universalSwap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stableToken(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    universalSwap(overrides?: CallOverrides): Promise<[string]>;

    userPositions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addBank(
    bank: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  adjustLiquidationPoints(
    positionId: PromiseOrValue<BigNumberish>,
    _liquidationPoints: LiquidationConditionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  banks(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  botLiquidate(
    positionId: PromiseOrValue<BigNumberish>,
    liquidationIndex: PromiseOrValue<BigNumberish>,
    swaps: SwapPointStruct[],
    conversions: ConversionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkLiquidate(
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { index: BigNumber; liquidate: boolean }>;

  close(
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    position: PositionStruct,
    suppliedTokens: PromiseOrValue<string>[],
    suppliedAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositInExisting(
    positionId: PromiseOrValue<BigNumberish>,
    provided: ProvidedStruct,
    swaps: SwapPointStruct[],
    conversions: ConversionStruct[],
    minAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimateValue(
    positionId: PromiseOrValue<BigNumberish>,
    inTermsOf: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBanks(overrides?: CallOverrides): Promise<string[]>;

  getPosition(positionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PositionDataStructOutput>;

  getPositionInteractions(
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PositionInteractionStructOutput[]>;

  getPositionRewards(
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber[]] & {
      rewards: string[];
      rewardAmounts: BigNumber[];
      rewardValues: BigNumber[];
    }
  >;

  getPositionTokens(
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber[]] & {
      tokens: string[];
      amounts: BigNumber[];
      values: BigNumber[];
    }
  >;

  getPositions(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;

  harvestAndRecompound(
    positionId: PromiseOrValue<BigNumberish>,
    swaps: SwapPointStruct[],
    conversions: ConversionStruct[],
    minAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  harvestRewards(
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  helper(overrides?: CallOverrides): Promise<string>;

  keepers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  networkToken(overrides?: CallOverrides): Promise<string>;

  numPositions(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  positionClosed(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  positionInteractions(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, ProvidedStructOutput, BigNumber, BigNumber] & {
      action: string;
      timestamp: BigNumber;
      blockNumber: BigNumber;
      assets: ProvidedStructOutput;
      usdValue: BigNumber;
      positionSizeChange: BigNumber;
    }
  >;

  positions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      user: string;
      bank: string;
      bankToken: BigNumber;
      amount: BigNumber;
    }
  >;

  recommendBank(lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setKeeper(
    keeperAddress: PromiseOrValue<string>,
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUniversalSwap(
    _universalSwap: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stableToken(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  universalSwap(overrides?: CallOverrides): Promise<string>;

  userPositions(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    positionId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBank(bank: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    adjustLiquidationPoints(
      positionId: PromiseOrValue<BigNumberish>,
      _liquidationPoints: LiquidationConditionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    banks(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    botLiquidate(
      positionId: PromiseOrValue<BigNumberish>,
      liquidationIndex: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkLiquidate(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { index: BigNumber; liquidate: boolean }>;

    close(positionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    deposit(
      position: PositionStruct,
      suppliedTokens: PromiseOrValue<string>[],
      suppliedAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositInExisting(
      positionId: PromiseOrValue<BigNumberish>,
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    estimateValue(
      positionId: PromiseOrValue<BigNumberish>,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBanks(overrides?: CallOverrides): Promise<string[]>;

    getPosition(positionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PositionDataStructOutput>;

    getPositionInteractions(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PositionInteractionStructOutput[]>;

    getPositionRewards(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[]] & {
        rewards: string[];
        rewardAmounts: BigNumber[];
        rewardValues: BigNumber[];
      }
    >;

    getPositionTokens(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[]] & {
        tokens: string[];
        amounts: BigNumber[];
        values: BigNumber[];
      }
    >;

    getPositions(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;

    harvestAndRecompound(
      positionId: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestRewards(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    helper(overrides?: CallOverrides): Promise<string>;

    keepers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    networkToken(overrides?: CallOverrides): Promise<string>;

    numPositions(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    positionClosed(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    positionInteractions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, ProvidedStructOutput, BigNumber, BigNumber] & {
        action: string;
        timestamp: BigNumber;
        blockNumber: BigNumber;
        assets: ProvidedStructOutput;
        usdValue: BigNumber;
        positionSizeChange: BigNumber;
      }
    >;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        user: string;
        bank: string;
        bankToken: BigNumber;
        amount: BigNumber;
      }
    >;

    recommendBank(lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setKeeper(
      keeperAddress: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniversalSwap(_universalSwap: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    stableToken(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    universalSwap(overrides?: CallOverrides): Promise<string>;

    userPositions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(uint256,address,uint256,address,uint256,tuple[])"(
      positionId?: null,
      bank?: null,
      bankToken?: null,
      user?: null,
      amount?: null,
      liquidationPoints?: null
    ): DepositEventFilter;
    Deposit(
      positionId?: null,
      bank?: null,
      bankToken?: null,
      user?: null,
      amount?: null,
      liquidationPoints?: null
    ): DepositEventFilter;

    "Harvest(uint256,address[],uint256[])"(positionId?: null, rewards?: null, rewardAmounts?: null): HarvestEventFilter;
    Harvest(positionId?: null, rewards?: null, rewardAmounts?: null): HarvestEventFilter;

    "HarvestRecompound(uint256,uint256)"(positionId?: null, lpTokens?: null): HarvestRecompoundEventFilter;
    HarvestRecompound(positionId?: null, lpTokens?: null): HarvestRecompoundEventFilter;

    "IncreasePosition(uint256,uint256)"(positionId?: null, amount?: null): IncreasePositionEventFilter;
    IncreasePosition(positionId?: null, amount?: null): IncreasePositionEventFilter;

    "KeeperUpdate(address,bool)"(keeper?: null, active?: null): KeeperUpdateEventFilter;
    KeeperUpdate(keeper?: null, active?: null): KeeperUpdateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PositionClose(uint256)"(positionId?: null): PositionCloseEventFilter;
    PositionClose(positionId?: null): PositionCloseEventFilter;

    "Withdraw(uint256,uint256)"(positionId?: null, amount?: null): WithdrawEventFilter;
    Withdraw(positionId?: null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    addBank(
      bank: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    adjustLiquidationPoints(
      positionId: PromiseOrValue<BigNumberish>,
      _liquidationPoints: LiquidationConditionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    banks(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    botLiquidate(
      positionId: PromiseOrValue<BigNumberish>,
      liquidationIndex: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkLiquidate(positionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    close(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      position: PositionStruct,
      suppliedTokens: PromiseOrValue<string>[],
      suppliedAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositInExisting(
      positionId: PromiseOrValue<BigNumberish>,
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimateValue(
      positionId: PromiseOrValue<BigNumberish>,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBanks(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(positionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getPositionInteractions(positionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getPositionRewards(positionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getPositionTokens(positionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getPositions(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    harvestAndRecompound(
      positionId: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    harvestRewards(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    helper(overrides?: CallOverrides): Promise<BigNumber>;

    keepers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    networkToken(overrides?: CallOverrides): Promise<BigNumber>;

    numPositions(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    positionClosed(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    positionInteractions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    recommendBank(lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setKeeper(
      keeperAddress: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUniversalSwap(
      _universalSwap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stableToken(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    universalSwap(overrides?: CallOverrides): Promise<BigNumber>;

    userPositions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBank(
      bank: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    adjustLiquidationPoints(
      positionId: PromiseOrValue<BigNumberish>,
      _liquidationPoints: LiquidationConditionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    banks(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    botLiquidate(
      positionId: PromiseOrValue<BigNumberish>,
      liquidationIndex: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkLiquidate(positionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    close(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      position: PositionStruct,
      suppliedTokens: PromiseOrValue<string>[],
      suppliedAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositInExisting(
      positionId: PromiseOrValue<BigNumberish>,
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimateValue(
      positionId: PromiseOrValue<BigNumberish>,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBanks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPosition(positionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPositionInteractions(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionRewards(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionTokens(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositions(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestAndRecompound(
      positionId: PromiseOrValue<BigNumberish>,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      minAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    harvestRewards(
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    helper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keepers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    networkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numPositions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionClosed(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionInteractions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recommendBank(lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setKeeper(
      keeperAddress: PromiseOrValue<string>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUniversalSwap(
      _universalSwap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stableToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    universalSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userPositions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      positionId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
