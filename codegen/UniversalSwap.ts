/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export type AssetStruct = {
  pool: PromiseOrValue<string>;
  manager: PromiseOrValue<string>;
  tokenId: PromiseOrValue<BigNumberish>;
  liquidity: PromiseOrValue<BigNumberish>;
  data: PromiseOrValue<BytesLike>;
};

export type AssetStructOutput = [string, string, BigNumber, BigNumber, string] & {
  pool: string;
  manager: string;
  tokenId: BigNumber;
  liquidity: BigNumber;
  data: string;
};

export type ProvidedStruct = {
  tokens: PromiseOrValue<string>[];
  amounts: PromiseOrValue<BigNumberish>[];
  nfts: AssetStruct[];
};

export type ProvidedStructOutput = [string[], BigNumber[], AssetStructOutput[]] & {
  tokens: string[];
  amounts: BigNumber[];
  nfts: AssetStructOutput[];
};

export type DesiredStruct = {
  outputERC20s: PromiseOrValue<string>[];
  outputERC721s: AssetStruct[];
  ratios: PromiseOrValue<BigNumberish>[];
  minAmountsOut: PromiseOrValue<BigNumberish>[];
};

export type DesiredStructOutput = [string[], AssetStructOutput[], BigNumber[], BigNumber[]] & {
  outputERC20s: string[];
  outputERC721s: AssetStructOutput[];
  ratios: BigNumber[];
  minAmountsOut: BigNumber[];
};

export type SwapPointStruct = {
  amountIn: PromiseOrValue<BigNumberish>;
  valueIn: PromiseOrValue<BigNumberish>;
  amountOut: PromiseOrValue<BigNumberish>;
  valueOut: PromiseOrValue<BigNumberish>;
  slippage: PromiseOrValue<BigNumberish>;
  tokenIn: PromiseOrValue<string>;
  swappers: PromiseOrValue<string>[];
  tokenOut: PromiseOrValue<string>;
  paths: PromiseOrValue<string>[][];
};

export type SwapPointStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string[],
  string,
  string[][]
] & {
  amountIn: BigNumber;
  valueIn: BigNumber;
  amountOut: BigNumber;
  valueOut: BigNumber;
  slippage: BigNumber;
  tokenIn: string;
  swappers: string[];
  tokenOut: string;
  paths: string[][];
};

export type ConversionStruct = {
  desiredERC721: AssetStruct;
  desiredERC20: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  underlying: PromiseOrValue<string>[];
  underlyingValues: PromiseOrValue<BigNumberish>[];
};

export type ConversionStructOutput = [AssetStructOutput, string, BigNumber, string[], BigNumber[]] & {
  desiredERC721: AssetStructOutput;
  desiredERC20: string;
  value: BigNumber;
  underlying: string[];
  underlyingValues: BigNumber[];
};

export interface UniversalSwapInterface extends utils.Interface {
  functions: {
    "conversionHelper()": FunctionFragment;
    "estimateValue((address[],uint256[],(address,address,uint256,uint256,bytes)[]),address)": FunctionFragment;
    "estimateValueERC20(address,uint256,address)": FunctionFragment;
    "estimateValueERC721((address,address,uint256,uint256,bytes),address)": FunctionFragment;
    "getAmountsOut((address[],uint256[],(address,address,uint256,uint256,bytes)[]),(address[],(address,address,uint256,uint256,bytes)[],uint256[],uint256[]))": FunctionFragment;
    "getAmountsOut2((address[],uint256[],(address,address,uint256,uint256,bytes)[]),(address[],(address,address,uint256,uint256,bytes)[],uint256[],uint256[]))": FunctionFragment;
    "getAmountsOutWithSwaps((address[],uint256[],(address,address,uint256,uint256,bytes)[]),(address[],(address,address,uint256,uint256,bytes)[],uint256[],uint256[]),(uint256,uint256,uint256,uint256,int256,address,address[],address,address[][])[],((address,address,uint256,uint256,bytes),address,uint256,address[],uint256[])[])": FunctionFragment;
    "getNFTPoolInteractors()": FunctionFragment;
    "getPoolInteractors()": FunctionFragment;
    "getProtocol(address)": FunctionFragment;
    "getSwappers()": FunctionFragment;
    "getTokenValues(address[],uint256[])": FunctionFragment;
    "getUnderlying((address[],uint256[],(address,address,uint256,uint256,bytes)[]))": FunctionFragment;
    "isSimpleToken(address)": FunctionFragment;
    "isSupported(address)": FunctionFragment;
    "networkToken()": FunctionFragment;
    "nftPoolInteractors(uint256)": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolInteractors(uint256)": FunctionFragment;
    "preSwapCalculateSwaps((address[],uint256[],(address,address,uint256,uint256,bytes)[]),(address[],(address,address,uint256,uint256,bytes)[],uint256[],uint256[]))": FunctionFragment;
    "preSwapCalculateUnderlying((address[],uint256[],(address,address,uint256,uint256,bytes)[]),(address[],(address,address,uint256,uint256,bytes)[],uint256[],uint256[]))": FunctionFragment;
    "providedHelper()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setNFTPoolInteractors(address[])": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setPoolInteractors(address[])": FunctionFragment;
    "setSwappers(address[])": FunctionFragment;
    "stableToken()": FunctionFragment;
    "swap((address[],uint256[],(address,address,uint256,uint256,bytes)[]),(uint256,uint256,uint256,uint256,int256,address,address[],address,address[][])[],((address,address,uint256,uint256,bytes),address,uint256,address[],uint256[])[],(address[],(address,address,uint256,uint256,bytes)[],uint256[],uint256[]),address)": FunctionFragment;
    "swapAfterTransfer((address[],uint256[],(address,address,uint256,uint256,bytes)[]),(uint256,uint256,uint256,uint256,int256,address,address[],address,address[][])[],((address,address,uint256,uint256,bytes),address,uint256,address[],uint256[])[],(address[],(address,address,uint256,uint256,bytes)[],uint256[],uint256[]),address)": FunctionFragment;
    "swapHelper()": FunctionFragment;
    "swappers(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "conversionHelper"
      | "estimateValue"
      | "estimateValueERC20"
      | "estimateValueERC721"
      | "getAmountsOut"
      | "getAmountsOut2"
      | "getAmountsOutWithSwaps"
      | "getNFTPoolInteractors"
      | "getPoolInteractors"
      | "getProtocol"
      | "getSwappers"
      | "getTokenValues"
      | "getUnderlying"
      | "isSimpleToken"
      | "isSupported"
      | "networkToken"
      | "nftPoolInteractors"
      | "oracle"
      | "owner"
      | "poolInteractors"
      | "preSwapCalculateSwaps"
      | "preSwapCalculateUnderlying"
      | "providedHelper"
      | "renounceOwnership"
      | "setNFTPoolInteractors"
      | "setOracle"
      | "setPoolInteractors"
      | "setSwappers"
      | "stableToken"
      | "swap"
      | "swapAfterTransfer"
      | "swapHelper"
      | "swappers"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "conversionHelper", values?: undefined): string;
  encodeFunctionData(functionFragment: "estimateValue", values: [ProvidedStruct, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "estimateValueERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "estimateValueERC721", values: [AssetStruct, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "getAmountsOut", values: [ProvidedStruct, DesiredStruct]): string;
  encodeFunctionData(functionFragment: "getAmountsOut2", values: [ProvidedStruct, DesiredStruct]): string;
  encodeFunctionData(
    functionFragment: "getAmountsOutWithSwaps",
    values: [ProvidedStruct, DesiredStruct, SwapPointStruct[], ConversionStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "getNFTPoolInteractors", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPoolInteractors", values?: undefined): string;
  encodeFunctionData(functionFragment: "getProtocol", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "getSwappers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenValues",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "getUnderlying", values: [ProvidedStruct]): string;
  encodeFunctionData(functionFragment: "isSimpleToken", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "isSupported", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "networkToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "nftPoolInteractors", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolInteractors", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "preSwapCalculateSwaps", values: [ProvidedStruct, DesiredStruct]): string;
  encodeFunctionData(functionFragment: "preSwapCalculateUnderlying", values: [ProvidedStruct, DesiredStruct]): string;
  encodeFunctionData(functionFragment: "providedHelper", values?: undefined): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "setNFTPoolInteractors", values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: "setOracle", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setPoolInteractors", values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: "setSwappers", values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: "stableToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [ProvidedStruct, SwapPointStruct[], ConversionStruct[], DesiredStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAfterTransfer",
    values: [ProvidedStruct, SwapPointStruct[], ConversionStruct[], DesiredStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "swapHelper", values?: undefined): string;
  encodeFunctionData(functionFragment: "swappers", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: "conversionHelper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "estimateValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "estimateValueERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "estimateValueERC721", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAmountsOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAmountsOut2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAmountsOutWithSwaps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNFTPoolInteractors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoolInteractors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProtocol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSwappers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokenValues", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUnderlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSimpleToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSupported", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "networkToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftPoolInteractors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInteractors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preSwapCalculateSwaps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preSwapCalculateUnderlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "providedHelper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNFTPoolInteractors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPoolInteractors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSwappers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stableToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapAfterTransfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapHelper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swappers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;

  events: {
    "AssetsSent(address,address[],address[],uint256[])": EventFragment;
    "NFTMinted(address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetsSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AssetsSentEventObject {
  receiver: string;
  tokens: string[];
  managers: string[];
  amountsAndIds: BigNumber[];
}
export type AssetsSentEvent = TypedEvent<[string, string[], string[], BigNumber[]], AssetsSentEventObject>;

export type AssetsSentEventFilter = TypedEventFilter<AssetsSentEvent>;

export interface NFTMintedEventObject {
  manager: string;
  tokenId: BigNumber;
  pool: string;
}
export type NFTMintedEvent = TypedEvent<[string, BigNumber, string], NFTMintedEventObject>;

export type NFTMintedEventFilter = TypedEventFilter<NFTMintedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface UniversalSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniversalSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    conversionHelper(overrides?: CallOverrides): Promise<[string]>;

    estimateValue(
      assets: ProvidedStruct,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateValueERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateValueERC721(
      nft: AssetStruct,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountsOut(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], SwapPointStructOutput[], ConversionStructOutput[], BigNumber[]] & {
        amounts: BigNumber[];
        swaps: SwapPointStructOutput[];
        conversions: ConversionStructOutput[];
        expectedUSDValues: BigNumber[];
      }
    >;

    getAmountsOut2(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmountsOutWithSwaps(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        amounts: BigNumber[];
        expectedUSDValues: BigNumber[];
      }
    >;

    getNFTPoolInteractors(overrides?: CallOverrides): Promise<[string[]]>;

    getPoolInteractors(overrides?: CallOverrides): Promise<[string[]]>;

    getProtocol(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    getSwappers(overrides?: CallOverrides): Promise<[string[]]>;

    getTokenValues(
      tokens: PromiseOrValue<string>[],
      tokenAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber] & { values: BigNumber[]; total: BigNumber }>;

    getUnderlying(provided: ProvidedStruct, overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    isSimpleToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isSupported(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    networkToken(overrides?: CallOverrides): Promise<[string]>;

    nftPoolInteractors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolInteractors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    preSwapCalculateSwaps(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: CallOverrides
    ): Promise<
      [SwapPointStructOutput[], ConversionStructOutput[]] & {
        swaps: SwapPointStructOutput[];
        conversions: ConversionStructOutput[];
      }
    >;

    preSwapCalculateUnderlying(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], BigNumber[], ConversionStructOutput[], string[], BigNumber[]]>;

    providedHelper(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setNFTPoolInteractors(
      _nftPoolInteractors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolInteractors(
      _poolInteractors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwappers(
      _swappers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stableToken(overrides?: CallOverrides): Promise<[string]>;

    swap(
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      desired: DesiredStruct,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapAfterTransfer(
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      desired: DesiredStruct,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapHelper(overrides?: CallOverrides): Promise<[string]>;

    swappers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  conversionHelper(overrides?: CallOverrides): Promise<string>;

  estimateValue(
    assets: ProvidedStruct,
    inTermsOf: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateValueERC20(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    inTermsOf: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateValueERC721(
    nft: AssetStruct,
    inTermsOf: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsOut(
    provided: ProvidedStruct,
    desired: DesiredStruct,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], SwapPointStructOutput[], ConversionStructOutput[], BigNumber[]] & {
      amounts: BigNumber[];
      swaps: SwapPointStructOutput[];
      conversions: ConversionStructOutput[];
      expectedUSDValues: BigNumber[];
    }
  >;

  getAmountsOut2(
    provided: ProvidedStruct,
    desired: DesiredStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmountsOutWithSwaps(
    provided: ProvidedStruct,
    desired: DesiredStruct,
    swaps: SwapPointStruct[],
    conversions: ConversionStruct[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & {
      amounts: BigNumber[];
      expectedUSDValues: BigNumber[];
    }
  >;

  getNFTPoolInteractors(overrides?: CallOverrides): Promise<string[]>;

  getPoolInteractors(overrides?: CallOverrides): Promise<string[]>;

  getProtocol(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getSwappers(overrides?: CallOverrides): Promise<string[]>;

  getTokenValues(
    tokens: PromiseOrValue<string>[],
    tokenAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber] & { values: BigNumber[]; total: BigNumber }>;

  getUnderlying(provided: ProvidedStruct, overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

  isSimpleToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isSupported(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  networkToken(overrides?: CallOverrides): Promise<string>;

  nftPoolInteractors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolInteractors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  preSwapCalculateSwaps(
    provided: ProvidedStruct,
    desired: DesiredStruct,
    overrides?: CallOverrides
  ): Promise<
    [SwapPointStructOutput[], ConversionStructOutput[]] & {
      swaps: SwapPointStructOutput[];
      conversions: ConversionStructOutput[];
    }
  >;

  preSwapCalculateUnderlying(
    provided: ProvidedStruct,
    desired: DesiredStruct,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[], BigNumber[], ConversionStructOutput[], string[], BigNumber[]]>;

  providedHelper(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setNFTPoolInteractors(
    _nftPoolInteractors: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    _oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolInteractors(
    _poolInteractors: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwappers(
    _swappers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stableToken(overrides?: CallOverrides): Promise<string>;

  swap(
    provided: ProvidedStruct,
    swaps: SwapPointStruct[],
    conversions: ConversionStruct[],
    desired: DesiredStruct,
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapAfterTransfer(
    provided: ProvidedStruct,
    swaps: SwapPointStruct[],
    conversions: ConversionStruct[],
    desired: DesiredStruct,
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapHelper(overrides?: CallOverrides): Promise<string>;

  swappers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    conversionHelper(overrides?: CallOverrides): Promise<string>;

    estimateValue(
      assets: ProvidedStruct,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateValueERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateValueERC721(
      nft: AssetStruct,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], SwapPointStructOutput[], ConversionStructOutput[], BigNumber[]] & {
        amounts: BigNumber[];
        swaps: SwapPointStructOutput[];
        conversions: ConversionStructOutput[];
        expectedUSDValues: BigNumber[];
      }
    >;

    getAmountsOut2(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], SwapPointStructOutput[], ConversionStructOutput[], BigNumber[]] & {
        amounts: BigNumber[];
        swaps: SwapPointStructOutput[];
        conversions: ConversionStructOutput[];
        expectedUSDValues: BigNumber[];
      }
    >;

    getAmountsOutWithSwaps(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        amounts: BigNumber[];
        expectedUSDValues: BigNumber[];
      }
    >;

    getNFTPoolInteractors(overrides?: CallOverrides): Promise<string[]>;

    getPoolInteractors(overrides?: CallOverrides): Promise<string[]>;

    getProtocol(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getSwappers(overrides?: CallOverrides): Promise<string[]>;

    getTokenValues(
      tokens: PromiseOrValue<string>[],
      tokenAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber] & { values: BigNumber[]; total: BigNumber }>;

    getUnderlying(provided: ProvidedStruct, overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    isSimpleToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isSupported(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    networkToken(overrides?: CallOverrides): Promise<string>;

    nftPoolInteractors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolInteractors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    preSwapCalculateSwaps(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: CallOverrides
    ): Promise<
      [SwapPointStructOutput[], ConversionStructOutput[]] & {
        swaps: SwapPointStructOutput[];
        conversions: ConversionStructOutput[];
      }
    >;

    preSwapCalculateUnderlying(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], BigNumber[], ConversionStructOutput[], string[], BigNumber[]]>;

    providedHelper(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setNFTPoolInteractors(_nftPoolInteractors: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    setOracle(_oracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setPoolInteractors(_poolInteractors: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    setSwappers(_swappers: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    stableToken(overrides?: CallOverrides): Promise<string>;

    swap(
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      desired: DesiredStruct,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapAfterTransfer(
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      desired: DesiredStruct,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapHelper(overrides?: CallOverrides): Promise<string>;

    swappers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AssetsSent(address,address[],address[],uint256[])"(
      receiver?: null,
      tokens?: null,
      managers?: null,
      amountsAndIds?: null
    ): AssetsSentEventFilter;
    AssetsSent(receiver?: null, tokens?: null, managers?: null, amountsAndIds?: null): AssetsSentEventFilter;

    "NFTMinted(address,uint256,address)"(manager?: null, tokenId?: null, pool?: null): NFTMintedEventFilter;
    NFTMinted(manager?: null, tokenId?: null, pool?: null): NFTMintedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    conversionHelper(overrides?: CallOverrides): Promise<BigNumber>;

    estimateValue(
      assets: ProvidedStruct,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateValueERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateValueERC721(
      nft: AssetStruct,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(provided: ProvidedStruct, desired: DesiredStruct, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountsOut2(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmountsOutWithSwaps(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTPoolInteractors(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInteractors(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocol(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSwappers(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenValues(
      tokens: PromiseOrValue<string>[],
      tokenAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlying(provided: ProvidedStruct, overrides?: CallOverrides): Promise<BigNumber>;

    isSimpleToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isSupported(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    networkToken(overrides?: CallOverrides): Promise<BigNumber>;

    nftPoolInteractors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolInteractors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    preSwapCalculateSwaps(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preSwapCalculateUnderlying(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providedHelper(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setNFTPoolInteractors(
      _nftPoolInteractors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracle(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolInteractors(
      _poolInteractors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwappers(
      _swappers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stableToken(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      desired: DesiredStruct,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapAfterTransfer(
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      desired: DesiredStruct,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapHelper(overrides?: CallOverrides): Promise<BigNumber>;

    swappers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    conversionHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateValue(
      assets: ProvidedStruct,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateValueERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateValueERC721(
      nft: AssetStruct,
      inTermsOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut2(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmountsOutWithSwaps(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTPoolInteractors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolInteractors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocol(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSwappers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenValues(
      tokens: PromiseOrValue<string>[],
      tokenAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlying(provided: ProvidedStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSimpleToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSupported(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    networkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftPoolInteractors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInteractors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preSwapCalculateSwaps(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preSwapCalculateUnderlying(
      provided: ProvidedStruct,
      desired: DesiredStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providedHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setNFTPoolInteractors(
      _nftPoolInteractors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolInteractors(
      _poolInteractors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwappers(
      _swappers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stableToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      desired: DesiredStruct,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapAfterTransfer(
      provided: ProvidedStruct,
      swaps: SwapPointStruct[],
      conversions: ConversionStruct[],
      desired: DesiredStruct,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swappers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
